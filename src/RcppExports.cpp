// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rcpp_lm_gaga
Rcpp::List rcpp_lm_gaga(Eigen::MatrixXd X, Eigen::MatrixXd y, SEXP s_alpha, SEXP s_itrNum, SEXP s_thresh, SEXP s_QR_flag, SEXP s_flag, SEXP s_lamda_0, SEXP s_fix_sigma, SEXP s_sigm2_0, SEXP s_fdiag);
RcppExport SEXP _GAGA_rcpp_lm_gaga(SEXP XSEXP, SEXP ySEXP, SEXP s_alphaSEXP, SEXP s_itrNumSEXP, SEXP s_threshSEXP, SEXP s_QR_flagSEXP, SEXP s_flagSEXP, SEXP s_lamda_0SEXP, SEXP s_fix_sigmaSEXP, SEXP s_sigm2_0SEXP, SEXP s_fdiagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type s_alpha(s_alphaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type s_itrNum(s_itrNumSEXP);
    Rcpp::traits::input_parameter< SEXP >::type s_thresh(s_threshSEXP);
    Rcpp::traits::input_parameter< SEXP >::type s_QR_flag(s_QR_flagSEXP);
    Rcpp::traits::input_parameter< SEXP >::type s_flag(s_flagSEXP);
    Rcpp::traits::input_parameter< SEXP >::type s_lamda_0(s_lamda_0SEXP);
    Rcpp::traits::input_parameter< SEXP >::type s_fix_sigma(s_fix_sigmaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type s_sigm2_0(s_sigm2_0SEXP);
    Rcpp::traits::input_parameter< SEXP >::type s_fdiag(s_fdiagSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_lm_gaga(X, y, s_alpha, s_itrNum, s_thresh, s_QR_flag, s_flag, s_lamda_0, s_fix_sigma, s_sigm2_0, s_fdiag));
    return rcpp_result_gen;
END_RCPP
}
// cpp_COX_gaga
Rcpp::List cpp_COX_gaga(Eigen::MatrixXd X, Eigen::MatrixXd y, Eigen::MatrixXd cens, double alpha, int itrNum, double thresh, bool flag, double lamda_0, bool fdiag);
RcppExport SEXP _GAGA_cpp_COX_gaga(SEXP XSEXP, SEXP ySEXP, SEXP censSEXP, SEXP alphaSEXP, SEXP itrNumSEXP, SEXP threshSEXP, SEXP flagSEXP, SEXP lamda_0SEXP, SEXP fdiagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type cens(censSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type itrNum(itrNumSEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    Rcpp::traits::input_parameter< bool >::type flag(flagSEXP);
    Rcpp::traits::input_parameter< double >::type lamda_0(lamda_0SEXP);
    Rcpp::traits::input_parameter< bool >::type fdiag(fdiagSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_COX_gaga(X, y, cens, alpha, itrNum, thresh, flag, lamda_0, fdiag));
    return rcpp_result_gen;
END_RCPP
}
// cpp_logistic_gaga
Rcpp::List cpp_logistic_gaga(Eigen::MatrixXd X, Eigen::MatrixXd y, SEXP s_alpha, SEXP s_itrNum, SEXP s_thresh, SEXP s_flag, SEXP s_lamda_0, SEXP s_fdiag);
RcppExport SEXP _GAGA_cpp_logistic_gaga(SEXP XSEXP, SEXP ySEXP, SEXP s_alphaSEXP, SEXP s_itrNumSEXP, SEXP s_threshSEXP, SEXP s_flagSEXP, SEXP s_lamda_0SEXP, SEXP s_fdiagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type s_alpha(s_alphaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type s_itrNum(s_itrNumSEXP);
    Rcpp::traits::input_parameter< SEXP >::type s_thresh(s_threshSEXP);
    Rcpp::traits::input_parameter< SEXP >::type s_flag(s_flagSEXP);
    Rcpp::traits::input_parameter< SEXP >::type s_lamda_0(s_lamda_0SEXP);
    Rcpp::traits::input_parameter< SEXP >::type s_fdiag(s_fdiagSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_logistic_gaga(X, y, s_alpha, s_itrNum, s_thresh, s_flag, s_lamda_0, s_fdiag));
    return rcpp_result_gen;
END_RCPP
}
// cpp_multinomial_gaga
Rcpp::List cpp_multinomial_gaga(Eigen::MatrixXd X, Eigen::MatrixXd y, SEXP s_alpha, SEXP s_itrNum, SEXP s_thresh, SEXP s_flag, SEXP s_lamda_0, SEXP s_fdiag);
RcppExport SEXP _GAGA_cpp_multinomial_gaga(SEXP XSEXP, SEXP ySEXP, SEXP s_alphaSEXP, SEXP s_itrNumSEXP, SEXP s_threshSEXP, SEXP s_flagSEXP, SEXP s_lamda_0SEXP, SEXP s_fdiagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type s_alpha(s_alphaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type s_itrNum(s_itrNumSEXP);
    Rcpp::traits::input_parameter< SEXP >::type s_thresh(s_threshSEXP);
    Rcpp::traits::input_parameter< SEXP >::type s_flag(s_flagSEXP);
    Rcpp::traits::input_parameter< SEXP >::type s_lamda_0(s_lamda_0SEXP);
    Rcpp::traits::input_parameter< SEXP >::type s_fdiag(s_fdiagSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_multinomial_gaga(X, y, s_alpha, s_itrNum, s_thresh, s_flag, s_lamda_0, s_fdiag));
    return rcpp_result_gen;
END_RCPP
}
// cpp_poisson_gaga
Rcpp::List cpp_poisson_gaga(Eigen::MatrixXd X, Eigen::MatrixXd y, SEXP s_alpha, SEXP s_itrNum, SEXP s_thresh, SEXP s_flag, SEXP s_lamda_0, SEXP s_fdiag);
RcppExport SEXP _GAGA_cpp_poisson_gaga(SEXP XSEXP, SEXP ySEXP, SEXP s_alphaSEXP, SEXP s_itrNumSEXP, SEXP s_threshSEXP, SEXP s_flagSEXP, SEXP s_lamda_0SEXP, SEXP s_fdiagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type s_alpha(s_alphaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type s_itrNum(s_itrNumSEXP);
    Rcpp::traits::input_parameter< SEXP >::type s_thresh(s_threshSEXP);
    Rcpp::traits::input_parameter< SEXP >::type s_flag(s_flagSEXP);
    Rcpp::traits::input_parameter< SEXP >::type s_lamda_0(s_lamda_0SEXP);
    Rcpp::traits::input_parameter< SEXP >::type s_fdiag(s_fdiagSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_poisson_gaga(X, y, s_alpha, s_itrNum, s_thresh, s_flag, s_lamda_0, s_fdiag));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_GAGA_rcpp_lm_gaga", (DL_FUNC) &_GAGA_rcpp_lm_gaga, 11},
    {"_GAGA_cpp_COX_gaga", (DL_FUNC) &_GAGA_cpp_COX_gaga, 9},
    {"_GAGA_cpp_logistic_gaga", (DL_FUNC) &_GAGA_cpp_logistic_gaga, 8},
    {"_GAGA_cpp_multinomial_gaga", (DL_FUNC) &_GAGA_cpp_multinomial_gaga, 8},
    {"_GAGA_cpp_poisson_gaga", (DL_FUNC) &_GAGA_cpp_poisson_gaga, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_GAGA(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
