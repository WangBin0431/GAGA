Std_ERR_ALASSO=sqrt(apply(ERR_ALASSO, 2, var))
ERR=c(Mean_ERR_ALASSO,Mean_ERR_SCAD,Mean_ERR_MCP,Mean_ERR_GAGA,Mean_ERR_GAGA_QR,Mean_ERR_ALASSO_CV,Mean_ERR_SCAD_CV,Mean_ERR_MCP_CV)
ACC=c(Mean_ACC_ALASSO,Mean_ACC_SCAD,Mean_ACC_MCP,Mean_ACC_GAGA,Mean_ACC_GAGA_QR,Mean_ACC_ALASSO_CV,Mean_ACC_SCAD_CV,Mean_ACC_MCP_CV)
Algorithms=factor(c(rep('ALASSO',Nlambda),rep('SCAD',Nlambda),rep('MCP',Nlambda),'GAGA','GAGA_QR','ALASSO_CV','SCAD_CV','MCP_CV'),
levels=c('GAGA','GAGA_QR','ALASSO','SCAD','MCP','ALASSO_CV','SCAD_CV','MCP_CV'))
ERR_ACC=data.frame(ERR,ACC,Algorithms)#for ROC curve
#Plotting
library(ggplot2)
g1=ggplot(ERR_ACC,aes(ERR,ACC,shape=Algorithms,color=Algorithms))+ geom_point(size=3)+scale_shape_manual(values=seq(0,15))#shape>6,需要手动设置
g1
ERR2=c(ERR_ALASSO_CV,ERR_SCAD_CV,ERR_MCP_CV,ERR_GAGA,ERR_GAGA_QR)
ACC2=c(ACC_ALASSO_CV,ACC_SCAD_CV,ACC_MCP_CV,ACC_GAGA,ACC_GAGA_QR)
Algorithms=factor(c(rep('ALASSO_CV',expnum),rep('SCAD_CV',expnum),rep('MCP_CV',expnum),
rep('GAGA',expnum),rep('GAGA_QR',expnum)),
levels=c('GAGA','GAGA_QR','ALASSO_CV','SCAD_CV','MCP_CV'))
ERR_ACC2=data.frame(ERR2,ACC2,Algorithms)#
g2=ggplot(ERR_ACC2, aes(x=Algorithms, y=ERR2,fill=Algorithms))+ylab("ERR") + geom_boxplot()#ERR box
g2
g3=ggplot(ERR_ACC2, aes(x=Algorithms, y=ACC2,fill=Algorithms))+xlab("Algorithms")+ylab("ACC") + geom_boxplot()#ACC box
g3
#For model 1
setwd("I:/GAGA/Github_project/GAGA/GAGA_linear_model")
#load lasso lib
library(ncvreg)
library(mvtnorm)
rm(list = ls())
set.seed(1234)
Nlambda=100
p_size = 8
sample_size=100
expnum = 100
Mean=0
Sd=1
cov_mat=matrix(1:p_size*p_size,p_size,p_size)
for(i in 1:p_size){for(j in 1:p_size) {cov_mat[i,j]=0.5^{abs(i-j)}}}
ERR_ALASSO=matrix(1:expnum*Nlambda,expnum,Nlambda)
ERR_SCAD=matrix(1:expnum*Nlambda,expnum,Nlambda)
ERR_MCP=matrix(1:expnum*Nlambda,expnum,Nlambda)
ACC_ALASSO=matrix(1:expnum*Nlambda,expnum,Nlambda)
ACC_SCAD=matrix(1:expnum*Nlambda,expnum,Nlambda)
ACC_MCP=matrix(1:expnum*Nlambda,expnum,Nlambda)
ERR_GAGA = NULL
ACC_GAGA = NULL
ERR_GAGA_QR = NULL
ACC_GAGA_QR = NULL
ERR_ALASSO_CV = NULL
ERR_SCAD_CV = NULL
ERR_MCP_CV = NULL
ACC_ALASSO_CV = NULL
ACC_SCAD_CV = NULL
ACC_MCP_CV = NULL
for(iter in 1:expnum){#Under each sample size, the experiment is repeated expnum times
cat("iter is:",iter,"\n");
#Set true beta
signal=c(runif(1,0,1),runif(1,0,1),runif(1,0,1))
beta_true=c(signal[1],signal[2],0,0,signal[3],0,0,0)
#write.table(beta_true,"beta_true.txt",row.names = FALSE,col.names = FALSE,quote=FALSE,append=TRUE)
pos_true=c(1,2,5);
pos_false=c(3,4,6,7,8);
#Generate random design matrix
X=rmvnorm(n=sample_size, mean=rep(0, nrow(cov_mat)), sigma=cov_mat)
raodong=rnorm(sample_size,mean=Mean,sd=Sd)
y=X%*%beta_true+raodong
##Adaptive LASSO
LSE=lm(y~X-1)## Linear Regression to create the Adaptive Weights Vector
weight=abs(LSE$coefficients)^1# Using gamma = 1
XW=X%*%diag(weight)
if(iter==1){
cvfit_ALASSO<- cv.ncvreg(XW, y,family="gaussian", penalty="lasso",nlambda =Nlambda, nfolds=10)
labmda_ALASSO=cvfit_ALASSO$lambda
}
cvfit_ALASSO<- cv.ncvreg(XW, y,family="gaussian", penalty="lasso",lambda =labmda_ALASSO, nfolds=10)
fit_ALASSO = cvfit_ALASSO$fit
for(j in 1:Nlambda){
tmp = fit_ALASSO$beta[,j][-1]
tmp = weight*tmp
ERR_ALASSO[iter,j]=norm(as.matrix(beta_true-tmp),'f')
pos_ALASSO=which(tmp!=0);
pos2_ALASSO=which(tmp==0);
ACC_ALASSO[iter,j]=(length(intersect(pos_ALASSO,pos_true))+length(intersect(pos2_ALASSO,pos_false)))/length(beta_true)
}
tmp = fit_ALASSO$beta[,cvfit_ALASSO$min][-1]
tmp = weight*tmp
ERR_ALASSO_CV[iter]=norm(as.matrix(beta_true-tmp),'f')
pos1=which(tmp!=0);
pos2=which(tmp==0);
ACC_ALASSO_CV[iter]=(length(intersect(pos1,pos_true))+length(intersect(pos2,pos_false)))/length(beta_true)
## SCAD
# fit_SCAD <- ncvreg(X, y,family="gaussian", penalty="SCAD",nlambda =Nlambda)
if(iter==1){
cvfit_SCAD<- cv.ncvreg(X, y,family="gaussian", penalty="SCAD",nlambda =Nlambda, nfolds=10)
labmda_SCAD=cvfit_SCAD$lambda
}
cvfit_SCAD <- cv.ncvreg(X, y,family="gaussian", penalty="SCAD",lambda =labmda_SCAD, nfolds=10)
fit_SCAD = cvfit_SCAD$fit
nor_SCAD=NULL
for(j in 1:Nlambda){ERR_SCAD[iter,j]=norm(as.matrix(beta_true-fit_SCAD$beta[,j][-1]),'f')}#
tACC_SCAD=NULL
for(j in 1:Nlambda){
pos_SCAD=which(fit_SCAD$beta[-1,j]!=0);
pos2_SCAD=which(fit_SCAD$beta[-1,j]==0);
ACC_SCAD[iter,j]=(length(intersect(pos_SCAD,pos_true))+length(intersect(pos2_SCAD,pos_false)))/length(beta_true)
}
tmp = fit_SCAD$beta[,cvfit_SCAD$min][-1]
ERR_SCAD_CV[iter]=norm(as.matrix(beta_true-tmp),'f')
pos1=which(tmp!=0);
pos2=which(tmp==0);
ACC_SCAD_CV[iter]=(length(intersect(pos1,pos_true))+length(intersect(pos2,pos_false)))/length(beta_true)
## MCP
# fit_MCP <- ncvreg(X, y,family="gaussian", penalty="MCP",nlambda =Nlambda)
if(iter==1){
cvfit_MCP<- cv.ncvreg(X, y,family="gaussian", penalty="MCP",nlambda =Nlambda, nfolds=10)
labmda_MCP=cvfit_MCP$lambda
}
cvfit_MCP <- cv.ncvreg(X, y,family="gaussian", penalty="MCP",lambda =labmda_MCP, nfolds=10)
fit_MCP = cvfit_MCP$fit
nor_MCP=NULL
for(j in 1:Nlambda){ERR_MCP[iter,j]=norm(as.matrix(beta_true-fit_MCP$beta[,j][-1]),'f')}#
tACC_MCP=NULL
for(j in 1:Nlambda){
pos_MCP=which(fit_MCP$beta[-1,j]!=0);
pos2_MCP=which(fit_MCP$beta[-1,j]==0);
ACC_MCP[iter,j]=(length(intersect(pos_MCP,pos_true))+length(intersect(pos2_MCP,pos_false)))/length(beta_true)
}
tmp = fit_MCP$beta[,cvfit_MCP$min][-1]
ERR_MCP_CV[iter]=norm(as.matrix(beta_true-tmp),'f')
pos1=which(tmp!=0);
pos2=which(tmp==0);
ACC_MCP_CV[iter]=(length(intersect(pos1,pos_true))+length(intersect(pos2,pos_false)))/length(beta_true)
##GaGa
source("GaGa.R")
mratio = 2
EW = LM_GAGA(X,y,ratio = mratio)
ERR_GAGA[iter]=norm(as.matrix(beta_true-EW),'f')
pos_GAGA=which(EW!=0);
pos2_GAGA=which(EW==0);
ACC_GAGA[iter]=(length(intersect(pos_GAGA,pos_true))+length(intersect(pos2_GAGA,pos_false)))/p_size
EW2 = LM_GAGA(X,y,ratio = mratio,QR_flag = T)
ERR_GAGA_QR[iter]=norm(as.matrix(beta_true-EW2),'f')
pos_GAGA_QR=which(EW2!=0);
pos2_GAGA_QR=which(EW2==0);
ACC_GAGA_QR[iter]=(length(intersect(pos_GAGA_QR,pos_true))+length(intersect(pos2_GAGA_QR,pos_false)))/p_size
}#for(iter in 1:expnum)
Mean_ERR_ALASSO=colMeans(ERR_ALASSO)
Mean_ERR_SCAD=colMeans(ERR_SCAD)
Mean_ERR_MCP=colMeans(ERR_MCP)
Mean_ACC_ALASSO=colMeans(ACC_ALASSO)
Mean_ACC_SCAD=colMeans(ACC_SCAD)
Mean_ACC_MCP=colMeans(ACC_MCP)
Mean_ERR_GAGA = mean(ERR_GAGA)
Mean_ERR_GAGA_QR = mean(ERR_GAGA_QR)
Mean_ACC_GAGA = mean(ACC_GAGA)
Mean_ACC_GAGA_QR = mean(ACC_GAGA_QR)
Mean_ERR_ALASSO_CV = mean(ERR_ALASSO_CV)
Mean_ERR_SCAD_CV = mean(ERR_SCAD_CV)
Mean_ERR_MCP_CV = mean(ERR_MCP_CV)
Mean_ACC_ALASSO_CV = mean(ACC_ALASSO_CV)
Mean_ACC_SCAD_CV = mean(ACC_SCAD_CV)
Mean_ACC_MCP_CV = mean(ACC_MCP_CV)
Std_ACC_MCP=sqrt(apply(ACC_MCP, 2, var))
Std_ACC_SCAD=sqrt(apply(ACC_SCAD, 2, var))
Std_ACC_ALASSO=sqrt(apply(ACC_ALASSO, 2, var))
Std_ERR_MCP=sqrt(apply(ERR_MCP, 2, var))
Std_ERR_SCAD=sqrt(apply(ERR_SCAD, 2, var))
Std_ERR_ALASSO=sqrt(apply(ERR_ALASSO, 2, var))
ERR=c(Mean_ERR_ALASSO,Mean_ERR_SCAD,Mean_ERR_MCP,Mean_ERR_GAGA,Mean_ERR_GAGA_QR,Mean_ERR_ALASSO_CV,Mean_ERR_SCAD_CV,Mean_ERR_MCP_CV)
ACC=c(Mean_ACC_ALASSO,Mean_ACC_SCAD,Mean_ACC_MCP,Mean_ACC_GAGA,Mean_ACC_GAGA_QR,Mean_ACC_ALASSO_CV,Mean_ACC_SCAD_CV,Mean_ACC_MCP_CV)
Algorithms=factor(c(rep('ALASSO',Nlambda),rep('SCAD',Nlambda),rep('MCP',Nlambda),'GAGA','GAGA_QR','ALASSO_CV','SCAD_CV','MCP_CV'),
levels=c('GAGA','GAGA_QR','ALASSO','SCAD','MCP','ALASSO_CV','SCAD_CV','MCP_CV'))
ERR_ACC=data.frame(ERR,ACC,Algorithms)#for ROC curve
#Plotting
library(ggplot2)
g1=ggplot(ERR_ACC,aes(ERR,ACC,shape=Algorithms,color=Algorithms))+ geom_point(size=3)+scale_shape_manual(values=seq(0,15))#shape>6,需要手动设置
g1
ERR2=c(ERR_ALASSO_CV,ERR_SCAD_CV,ERR_MCP_CV,ERR_GAGA,ERR_GAGA_QR)
ACC2=c(ACC_ALASSO_CV,ACC_SCAD_CV,ACC_MCP_CV,ACC_GAGA,ACC_GAGA_QR)
Algorithms=factor(c(rep('ALASSO_CV',expnum),rep('SCAD_CV',expnum),rep('MCP_CV',expnum),
rep('GAGA',expnum),rep('GAGA_QR',expnum)),
levels=c('GAGA','GAGA_QR','ALASSO_CV','SCAD_CV','MCP_CV'))
ERR_ACC2=data.frame(ERR2,ACC2,Algorithms)#
g2=ggplot(ERR_ACC2, aes(x=Algorithms, y=ERR2,fill=Algorithms))+ylab("ERR") + geom_boxplot()#ERR box
g2
g3=ggplot(ERR_ACC2, aes(x=Algorithms, y=ACC2,fill=Algorithms))+xlab("Algorithms")+ylab("ACC") + geom_boxplot()#ACC box
g3
#For model 1
setwd("I:/GAGA/Github_project/GAGA/GAGA_linear_model")
#load lasso lib
library(ncvreg)
library(mvtnorm)
source("LM_GAGA.R")
rm(list = ls())
set.seed(1234)
Nlambda=100
p_size = 8
sample_size=100
expnum = 100
Mean=0
Sd=1
cov_mat=matrix(1:p_size*p_size,p_size,p_size)
for(i in 1:p_size){for(j in 1:p_size) {cov_mat[i,j]=0.5^{abs(i-j)}}}
ERR_ALASSO=matrix(1:expnum*Nlambda,expnum,Nlambda)
ERR_SCAD=matrix(1:expnum*Nlambda,expnum,Nlambda)
ERR_MCP=matrix(1:expnum*Nlambda,expnum,Nlambda)
ACC_ALASSO=matrix(1:expnum*Nlambda,expnum,Nlambda)
ACC_SCAD=matrix(1:expnum*Nlambda,expnum,Nlambda)
ACC_MCP=matrix(1:expnum*Nlambda,expnum,Nlambda)
ERR_GAGA = NULL
ACC_GAGA = NULL
ERR_GAGA_QR = NULL
ACC_GAGA_QR = NULL
ERR_ALASSO_CV = NULL
ERR_SCAD_CV = NULL
ERR_MCP_CV = NULL
ACC_ALASSO_CV = NULL
ACC_SCAD_CV = NULL
ACC_MCP_CV = NULL
for(iter in 1:expnum){#Under each sample size, the experiment is repeated expnum times
cat("iter is:",iter,"\n");
#Set true beta
signal=c(runif(1,0,1),runif(1,0,1),runif(1,0,1))
beta_true=c(signal[1],signal[2],0,0,signal[3],0,0,0)
#write.table(beta_true,"beta_true.txt",row.names = FALSE,col.names = FALSE,quote=FALSE,append=TRUE)
pos_true=c(1,2,5);
pos_false=c(3,4,6,7,8);
#Generate random design matrix
X=rmvnorm(n=sample_size, mean=rep(0, nrow(cov_mat)), sigma=cov_mat)
raodong=rnorm(sample_size,mean=Mean,sd=Sd)
y=X%*%beta_true+raodong
##Adaptive LASSO
LSE=lm(y~X-1)## Linear Regression to create the Adaptive Weights Vector
weight=abs(LSE$coefficients)^1# Using gamma = 1
XW=X%*%diag(weight)
if(iter==1){
cvfit_ALASSO<- cv.ncvreg(XW, y,family="gaussian", penalty="lasso",nlambda =Nlambda, nfolds=10)
labmda_ALASSO=cvfit_ALASSO$lambda
}
cvfit_ALASSO<- cv.ncvreg(XW, y,family="gaussian", penalty="lasso",lambda =labmda_ALASSO, nfolds=10)
fit_ALASSO = cvfit_ALASSO$fit
for(j in 1:Nlambda){
tmp = fit_ALASSO$beta[,j][-1]
tmp = weight*tmp
ERR_ALASSO[iter,j]=norm(as.matrix(beta_true-tmp),'f')
pos_ALASSO=which(tmp!=0);
pos2_ALASSO=which(tmp==0);
ACC_ALASSO[iter,j]=(length(intersect(pos_ALASSO,pos_true))+length(intersect(pos2_ALASSO,pos_false)))/length(beta_true)
}
tmp = fit_ALASSO$beta[,cvfit_ALASSO$min][-1]
tmp = weight*tmp
ERR_ALASSO_CV[iter]=norm(as.matrix(beta_true-tmp),'f')
pos1=which(tmp!=0);
pos2=which(tmp==0);
ACC_ALASSO_CV[iter]=(length(intersect(pos1,pos_true))+length(intersect(pos2,pos_false)))/length(beta_true)
## SCAD
# fit_SCAD <- ncvreg(X, y,family="gaussian", penalty="SCAD",nlambda =Nlambda)
if(iter==1){
cvfit_SCAD<- cv.ncvreg(X, y,family="gaussian", penalty="SCAD",nlambda =Nlambda, nfolds=10)
labmda_SCAD=cvfit_SCAD$lambda
}
cvfit_SCAD <- cv.ncvreg(X, y,family="gaussian", penalty="SCAD",lambda =labmda_SCAD, nfolds=10)
fit_SCAD = cvfit_SCAD$fit
nor_SCAD=NULL
for(j in 1:Nlambda){ERR_SCAD[iter,j]=norm(as.matrix(beta_true-fit_SCAD$beta[,j][-1]),'f')}#
tACC_SCAD=NULL
for(j in 1:Nlambda){
pos_SCAD=which(fit_SCAD$beta[-1,j]!=0);
pos2_SCAD=which(fit_SCAD$beta[-1,j]==0);
ACC_SCAD[iter,j]=(length(intersect(pos_SCAD,pos_true))+length(intersect(pos2_SCAD,pos_false)))/length(beta_true)
}
tmp = fit_SCAD$beta[,cvfit_SCAD$min][-1]
ERR_SCAD_CV[iter]=norm(as.matrix(beta_true-tmp),'f')
pos1=which(tmp!=0);
pos2=which(tmp==0);
ACC_SCAD_CV[iter]=(length(intersect(pos1,pos_true))+length(intersect(pos2,pos_false)))/length(beta_true)
## MCP
# fit_MCP <- ncvreg(X, y,family="gaussian", penalty="MCP",nlambda =Nlambda)
if(iter==1){
cvfit_MCP<- cv.ncvreg(X, y,family="gaussian", penalty="MCP",nlambda =Nlambda, nfolds=10)
labmda_MCP=cvfit_MCP$lambda
}
cvfit_MCP <- cv.ncvreg(X, y,family="gaussian", penalty="MCP",lambda =labmda_MCP, nfolds=10)
fit_MCP = cvfit_MCP$fit
nor_MCP=NULL
for(j in 1:Nlambda){ERR_MCP[iter,j]=norm(as.matrix(beta_true-fit_MCP$beta[,j][-1]),'f')}#
tACC_MCP=NULL
for(j in 1:Nlambda){
pos_MCP=which(fit_MCP$beta[-1,j]!=0);
pos2_MCP=which(fit_MCP$beta[-1,j]==0);
ACC_MCP[iter,j]=(length(intersect(pos_MCP,pos_true))+length(intersect(pos2_MCP,pos_false)))/length(beta_true)
}
tmp = fit_MCP$beta[,cvfit_MCP$min][-1]
ERR_MCP_CV[iter]=norm(as.matrix(beta_true-tmp),'f')
pos1=which(tmp!=0);
pos2=which(tmp==0);
ACC_MCP_CV[iter]=(length(intersect(pos1,pos_true))+length(intersect(pos2,pos_false)))/length(beta_true)
##GaGa
mratio = 2
EW = LM_GAGA(X,y,ratio = mratio)
ERR_GAGA[iter]=norm(as.matrix(beta_true-EW),'f')
pos_GAGA=which(EW!=0);
pos2_GAGA=which(EW==0);
ACC_GAGA[iter]=(length(intersect(pos_GAGA,pos_true))+length(intersect(pos2_GAGA,pos_false)))/p_size
EW2 = LM_GAGA(X,y,ratio = mratio,QR_flag = T)
ERR_GAGA_QR[iter]=norm(as.matrix(beta_true-EW2),'f')
pos_GAGA_QR=which(EW2!=0);
pos2_GAGA_QR=which(EW2==0);
ACC_GAGA_QR[iter]=(length(intersect(pos_GAGA_QR,pos_true))+length(intersect(pos2_GAGA_QR,pos_false)))/p_size
}#for(iter in 1:expnum)
Mean_ERR_ALASSO=colMeans(ERR_ALASSO)
Mean_ERR_SCAD=colMeans(ERR_SCAD)
Mean_ERR_MCP=colMeans(ERR_MCP)
Mean_ACC_ALASSO=colMeans(ACC_ALASSO)
Mean_ACC_SCAD=colMeans(ACC_SCAD)
Mean_ACC_MCP=colMeans(ACC_MCP)
Mean_ERR_GAGA = mean(ERR_GAGA)
Mean_ERR_GAGA_QR = mean(ERR_GAGA_QR)
Mean_ACC_GAGA = mean(ACC_GAGA)
Mean_ACC_GAGA_QR = mean(ACC_GAGA_QR)
Mean_ERR_ALASSO_CV = mean(ERR_ALASSO_CV)
Mean_ERR_SCAD_CV = mean(ERR_SCAD_CV)
Mean_ERR_MCP_CV = mean(ERR_MCP_CV)
Mean_ACC_ALASSO_CV = mean(ACC_ALASSO_CV)
Mean_ACC_SCAD_CV = mean(ACC_SCAD_CV)
Mean_ACC_MCP_CV = mean(ACC_MCP_CV)
Std_ACC_MCP=sqrt(apply(ACC_MCP, 2, var))
Std_ACC_SCAD=sqrt(apply(ACC_SCAD, 2, var))
Std_ACC_ALASSO=sqrt(apply(ACC_ALASSO, 2, var))
Std_ERR_MCP=sqrt(apply(ERR_MCP, 2, var))
Std_ERR_SCAD=sqrt(apply(ERR_SCAD, 2, var))
Std_ERR_ALASSO=sqrt(apply(ERR_ALASSO, 2, var))
ERR=c(Mean_ERR_ALASSO,Mean_ERR_SCAD,Mean_ERR_MCP,Mean_ERR_GAGA,Mean_ERR_GAGA_QR,Mean_ERR_ALASSO_CV,Mean_ERR_SCAD_CV,Mean_ERR_MCP_CV)
ACC=c(Mean_ACC_ALASSO,Mean_ACC_SCAD,Mean_ACC_MCP,Mean_ACC_GAGA,Mean_ACC_GAGA_QR,Mean_ACC_ALASSO_CV,Mean_ACC_SCAD_CV,Mean_ACC_MCP_CV)
Algorithms=factor(c(rep('ALASSO',Nlambda),rep('SCAD',Nlambda),rep('MCP',Nlambda),'GAGA','GAGA_QR','ALASSO_CV','SCAD_CV','MCP_CV'),
levels=c('GAGA','GAGA_QR','ALASSO','SCAD','MCP','ALASSO_CV','SCAD_CV','MCP_CV'))
ERR_ACC=data.frame(ERR,ACC,Algorithms)#for ROC curve
#Plotting
library(ggplot2)
g1=ggplot(ERR_ACC,aes(ERR,ACC,shape=Algorithms,color=Algorithms))+ geom_point(size=3)+scale_shape_manual(values=seq(0,15))#shape>6,需要手动设置
g1
ERR2=c(ERR_ALASSO_CV,ERR_SCAD_CV,ERR_MCP_CV,ERR_GAGA,ERR_GAGA_QR)
ACC2=c(ACC_ALASSO_CV,ACC_SCAD_CV,ACC_MCP_CV,ACC_GAGA,ACC_GAGA_QR)
Algorithms=factor(c(rep('ALASSO_CV',expnum),rep('SCAD_CV',expnum),rep('MCP_CV',expnum),
rep('GAGA',expnum),rep('GAGA_QR',expnum)),
levels=c('GAGA','GAGA_QR','ALASSO_CV','SCAD_CV','MCP_CV'))
ERR_ACC2=data.frame(ERR2,ACC2,Algorithms)#
g2=ggplot(ERR_ACC2, aes(x=Algorithms, y=ERR2,fill=Algorithms))+ylab("ERR") + geom_boxplot()#ERR box
g2
g3=ggplot(ERR_ACC2, aes(x=Algorithms, y=ACC2,fill=Algorithms))+xlab("Algorithms")+ylab("ACC") + geom_boxplot()#ACC box
g3
#For model 1
setwd("I:/GAGA/Github_project/GAGA/GAGA_linear_model")
#load lasso lib
library(ncvreg)
library(mvtnorm)
source("LM_GAGA.R")
rm(list = ls())
set.seed(1234)
Nlambda=100
p_size = 8
sample_size=100
expnum = 100
Mean=0
Sd=1
cov_mat=matrix(1:p_size*p_size,p_size,p_size)
for(i in 1:p_size){for(j in 1:p_size) {cov_mat[i,j]=0.5^{abs(i-j)}}}
ERR_ALASSO=matrix(1:expnum*Nlambda,expnum,Nlambda)
ERR_SCAD=matrix(1:expnum*Nlambda,expnum,Nlambda)
ERR_MCP=matrix(1:expnum*Nlambda,expnum,Nlambda)
ACC_ALASSO=matrix(1:expnum*Nlambda,expnum,Nlambda)
ACC_SCAD=matrix(1:expnum*Nlambda,expnum,Nlambda)
ACC_MCP=matrix(1:expnum*Nlambda,expnum,Nlambda)
ERR_GAGA = NULL
ACC_GAGA = NULL
ERR_GAGA_QR = NULL
ACC_GAGA_QR = NULL
ERR_ALASSO_CV = NULL
ERR_SCAD_CV = NULL
ERR_MCP_CV = NULL
ACC_ALASSO_CV = NULL
ACC_SCAD_CV = NULL
ACC_MCP_CV = NULL
for(iter in 1:expnum){#Under each sample size, the experiment is repeated expnum times
cat("iter is:",iter,"\n");
#Set true beta
signal=c(runif(1,0,1),runif(1,0,1),runif(1,0,1))
beta_true=c(signal[1],signal[2],0,0,signal[3],0,0,0)
#write.table(beta_true,"beta_true.txt",row.names = FALSE,col.names = FALSE,quote=FALSE,append=TRUE)
pos_true=c(1,2,5);
pos_false=c(3,4,6,7,8);
#Generate random design matrix
X=rmvnorm(n=sample_size, mean=rep(0, nrow(cov_mat)), sigma=cov_mat)
raodong=rnorm(sample_size,mean=Mean,sd=Sd)
y=X%*%beta_true+raodong
##Adaptive LASSO
LSE=lm(y~X-1)## Linear Regression to create the Adaptive Weights Vector
weight=abs(LSE$coefficients)^1# Using gamma = 1
XW=X%*%diag(weight)
if(iter==1){
cvfit_ALASSO<- cv.ncvreg(XW, y,family="gaussian", penalty="lasso",nlambda =Nlambda, nfolds=10)
labmda_ALASSO=cvfit_ALASSO$lambda
}
cvfit_ALASSO<- cv.ncvreg(XW, y,family="gaussian", penalty="lasso",lambda =labmda_ALASSO, nfolds=10)
fit_ALASSO = cvfit_ALASSO$fit
for(j in 1:Nlambda){
tmp = fit_ALASSO$beta[,j][-1]
tmp = weight*tmp
ERR_ALASSO[iter,j]=norm(as.matrix(beta_true-tmp),'f')
pos_ALASSO=which(tmp!=0);
pos2_ALASSO=which(tmp==0);
ACC_ALASSO[iter,j]=(length(intersect(pos_ALASSO,pos_true))+length(intersect(pos2_ALASSO,pos_false)))/length(beta_true)
}
tmp = fit_ALASSO$beta[,cvfit_ALASSO$min][-1]
tmp = weight*tmp
ERR_ALASSO_CV[iter]=norm(as.matrix(beta_true-tmp),'f')
pos1=which(tmp!=0);
pos2=which(tmp==0);
ACC_ALASSO_CV[iter]=(length(intersect(pos1,pos_true))+length(intersect(pos2,pos_false)))/length(beta_true)
## SCAD
# fit_SCAD <- ncvreg(X, y,family="gaussian", penalty="SCAD",nlambda =Nlambda)
if(iter==1){
cvfit_SCAD<- cv.ncvreg(X, y,family="gaussian", penalty="SCAD",nlambda =Nlambda, nfolds=10)
labmda_SCAD=cvfit_SCAD$lambda
}
cvfit_SCAD <- cv.ncvreg(X, y,family="gaussian", penalty="SCAD",lambda =labmda_SCAD, nfolds=10)
fit_SCAD = cvfit_SCAD$fit
nor_SCAD=NULL
for(j in 1:Nlambda){ERR_SCAD[iter,j]=norm(as.matrix(beta_true-fit_SCAD$beta[,j][-1]),'f')}#
tACC_SCAD=NULL
for(j in 1:Nlambda){
pos_SCAD=which(fit_SCAD$beta[-1,j]!=0);
pos2_SCAD=which(fit_SCAD$beta[-1,j]==0);
ACC_SCAD[iter,j]=(length(intersect(pos_SCAD,pos_true))+length(intersect(pos2_SCAD,pos_false)))/length(beta_true)
}
tmp = fit_SCAD$beta[,cvfit_SCAD$min][-1]
ERR_SCAD_CV[iter]=norm(as.matrix(beta_true-tmp),'f')
pos1=which(tmp!=0);
pos2=which(tmp==0);
ACC_SCAD_CV[iter]=(length(intersect(pos1,pos_true))+length(intersect(pos2,pos_false)))/length(beta_true)
## MCP
# fit_MCP <- ncvreg(X, y,family="gaussian", penalty="MCP",nlambda =Nlambda)
if(iter==1){
cvfit_MCP<- cv.ncvreg(X, y,family="gaussian", penalty="MCP",nlambda =Nlambda, nfolds=10)
labmda_MCP=cvfit_MCP$lambda
}
cvfit_MCP <- cv.ncvreg(X, y,family="gaussian", penalty="MCP",lambda =labmda_MCP, nfolds=10)
fit_MCP = cvfit_MCP$fit
nor_MCP=NULL
for(j in 1:Nlambda){ERR_MCP[iter,j]=norm(as.matrix(beta_true-fit_MCP$beta[,j][-1]),'f')}#
tACC_MCP=NULL
for(j in 1:Nlambda){
pos_MCP=which(fit_MCP$beta[-1,j]!=0);
pos2_MCP=which(fit_MCP$beta[-1,j]==0);
ACC_MCP[iter,j]=(length(intersect(pos_MCP,pos_true))+length(intersect(pos2_MCP,pos_false)))/length(beta_true)
}
tmp = fit_MCP$beta[,cvfit_MCP$min][-1]
ERR_MCP_CV[iter]=norm(as.matrix(beta_true-tmp),'f')
pos1=which(tmp!=0);
pos2=which(tmp==0);
ACC_MCP_CV[iter]=(length(intersect(pos1,pos_true))+length(intersect(pos2,pos_false)))/length(beta_true)
##GaGa
mratio = 2
EW = LM_GAGA(X,y,ratio = mratio)
ERR_GAGA[iter]=norm(as.matrix(beta_true-EW),'f')
pos_GAGA=which(EW!=0);
pos2_GAGA=which(EW==0);
ACC_GAGA[iter]=(length(intersect(pos_GAGA,pos_true))+length(intersect(pos2_GAGA,pos_false)))/p_size
EW2 = LM_GAGA(X,y,ratio = mratio,QR_flag = T)
ERR_GAGA_QR[iter]=norm(as.matrix(beta_true-EW2),'f')
pos_GAGA_QR=which(EW2!=0);
pos2_GAGA_QR=which(EW2==0);
ACC_GAGA_QR[iter]=(length(intersect(pos_GAGA_QR,pos_true))+length(intersect(pos2_GAGA_QR,pos_false)))/p_size
}#for(iter in 1:expnum)
Mean_ERR_ALASSO=colMeans(ERR_ALASSO)
Mean_ERR_SCAD=colMeans(ERR_SCAD)
Mean_ERR_MCP=colMeans(ERR_MCP)
Mean_ACC_ALASSO=colMeans(ACC_ALASSO)
Mean_ACC_SCAD=colMeans(ACC_SCAD)
Mean_ACC_MCP=colMeans(ACC_MCP)
Mean_ERR_GAGA = mean(ERR_GAGA)
Mean_ERR_GAGA_QR = mean(ERR_GAGA_QR)
Mean_ACC_GAGA = mean(ACC_GAGA)
Mean_ACC_GAGA_QR = mean(ACC_GAGA_QR)
Mean_ERR_ALASSO_CV = mean(ERR_ALASSO_CV)
Mean_ERR_SCAD_CV = mean(ERR_SCAD_CV)
Mean_ERR_MCP_CV = mean(ERR_MCP_CV)
Mean_ACC_ALASSO_CV = mean(ACC_ALASSO_CV)
Mean_ACC_SCAD_CV = mean(ACC_SCAD_CV)
Mean_ACC_MCP_CV = mean(ACC_MCP_CV)
Std_ACC_MCP=sqrt(apply(ACC_MCP, 2, var))
Std_ACC_SCAD=sqrt(apply(ACC_SCAD, 2, var))
Std_ACC_ALASSO=sqrt(apply(ACC_ALASSO, 2, var))
Std_ERR_MCP=sqrt(apply(ERR_MCP, 2, var))
Std_ERR_SCAD=sqrt(apply(ERR_SCAD, 2, var))
Std_ERR_ALASSO=sqrt(apply(ERR_ALASSO, 2, var))
ERR=c(Mean_ERR_ALASSO,Mean_ERR_SCAD,Mean_ERR_MCP,Mean_ERR_GAGA,Mean_ERR_GAGA_QR,Mean_ERR_ALASSO_CV,Mean_ERR_SCAD_CV,Mean_ERR_MCP_CV)
ACC=c(Mean_ACC_ALASSO,Mean_ACC_SCAD,Mean_ACC_MCP,Mean_ACC_GAGA,Mean_ACC_GAGA_QR,Mean_ACC_ALASSO_CV,Mean_ACC_SCAD_CV,Mean_ACC_MCP_CV)
Algorithms=factor(c(rep('ALASSO',Nlambda),rep('SCAD',Nlambda),rep('MCP',Nlambda),'GAGA','GAGA_QR','ALASSO_CV','SCAD_CV','MCP_CV'),
levels=c('GAGA','GAGA_QR','ALASSO','SCAD','MCP','ALASSO_CV','SCAD_CV','MCP_CV'))
ERR_ACC=data.frame(ERR,ACC,Algorithms)#for ROC curve
#Plotting
library(ggplot2)
g1=ggplot(ERR_ACC,aes(ERR,ACC,shape=Algorithms,color=Algorithms))+ geom_point(size=3)+scale_shape_manual(values=seq(0,15))#shape>6,需要手动设置
g1
ERR2=c(ERR_ALASSO_CV,ERR_SCAD_CV,ERR_MCP_CV,ERR_GAGA,ERR_GAGA_QR)
ACC2=c(ACC_ALASSO_CV,ACC_SCAD_CV,ACC_MCP_CV,ACC_GAGA,ACC_GAGA_QR)
Algorithms=factor(c(rep('ALASSO_CV',expnum),rep('SCAD_CV',expnum),rep('MCP_CV',expnum),
rep('GAGA',expnum),rep('GAGA_QR',expnum)),
levels=c('GAGA','GAGA_QR','ALASSO_CV','SCAD_CV','MCP_CV'))
ERR_ACC2=data.frame(ERR2,ACC2,Algorithms)#
g2=ggplot(ERR_ACC2, aes(x=Algorithms, y=ERR2,fill=Algorithms))+ylab("ERR") + geom_boxplot()#ERR box
g2
g3=ggplot(ERR_ACC2, aes(x=Algorithms, y=ACC2,fill=Algorithms))+xlab("Algorithms")+ylab("ACC") + geom_boxplot()#ACC box
g3
