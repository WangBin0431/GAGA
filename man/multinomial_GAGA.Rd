% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/multinomial_GAGA.R
\name{multinomial_GAGA}
\alias{multinomial_GAGA}
\title{Fit a multinomial model via the GAGA algorithm}
\usage{
multinomial_GAGA(
  X,
  y,
  alpha = 1,
  itrNum = 50,
  thresh = 0.001,
  flag = TRUE,
  lamda_0 = 0.001,
  fdiag = TRUE
)
}
\arguments{
\item{X}{Input matrix, of dimension nobs*nvars; each row is an observation.
If the intercept term needs to be considered in the estimation process, then the first column of \code{X} must be all 1s.}

\item{y}{a One-hot response matrix or a \code{nc>=2} level factor}

\item{alpha}{Hyperparameter. The suggested value for alpha is 1 or 2.
When the collinearity of the load matrix is serious, the hyperparameters can be selected larger, such as 5.}

\item{itrNum}{The number of iteration steps. In general, 20 steps are enough.
If the condition number of \code{X} is large, it is recommended to greatly increase the
number of iteration steps.}

\item{thresh}{Convergence threshold for beta Change, if \code{max(abs(beta-beta_old))<threshold}, return.}

\item{flag}{It identifies whether to make model selection. The default is \code{TRUE}.}

\item{lamda_0}{The initial value of the regularization parameter for ridge regression.
The running result of the algorithm is not sensitive to this value.}

\item{fdiag}{It identifies whether to use diag Approximation to speed up the algorithm.}
}
\value{
Coefficient matrix with K-1 columns beta_1,...,beta_{K-1} where K is the class number.
For k=1,..,K-1, the probability
\deqn{Pr(G=k|x)=exp(x^T beta_k) /(1+sum_{k=1}^{K-1}exp(x^T beta_k))}.
For k=K, the probability \deqn{Pr(G=K|x)=1/(1+sum_{k=1}^{K-1}exp(x^T beta_k))}.
}
\description{
Fit a multinomial model the Global Adaptive Generative Adjustment algorithm
}
\examples{
# multinomial
set.seed(2022)
library(mvtnorm)
cat("\n")
cat("Test multinomial GAGA\n")#'
p_size = 20
C = 3
classnames = c("C1","C2","C3","C4")
sample_size = 500
test_size = 1000#'
rate = 0.5 #Proportion of value zero in beta
Num = 10 # Total number of experiments
R1 = 1
R2 = 5#'
#Set true beta
beta_true = matrix(rep(0,p_size*C),c(p_size,C))
zeroNum = round(rate*p_size)
for(jj in 1:C){
  ind = sample(1:p_size,zeroNum)#'
  tmp = runif(p_size,0,R2)
  tmp[ind] = 0
  beta_true[,jj] = tmp
}#'
cov_mat=matrix(1:p_size*p_size,p_size,p_size)
for(i in 1:p_size){for(j in 1:p_size) {if(i!=j){cov_mat[i,j]=0.0}else{cov_mat[i,j]=1}}}#'
#Generate training samples
X = R1*rmvnorm(n=sample_size, mean=rep(0, nrow(cov_mat)), sigma=cov_mat)#'
X[1:sample_size,1]=1
z = X\%*\%beta_true
t = exp(z)/(1+rowSums(exp(z)))
t = cbind(t,1-rowSums(t))
tt = t(apply(t,1,cumsum))
tt = cbind(rep(0,sample_size),tt)#'
# y = matrix(rep(0,sample_size*(C+1)),c(sample_size,C+1))
y = rep(0,sample_size)
for(jj in 1:sample_size){
  tmp = runif(1,0,1)
  for(kk in 1:(C+1)){
    if((tmp>tt[jj,kk])&&(tmp<=tt[jj,kk+1])){
      # y[jj,kk] = 1
      y[jj] = kk
      break
    }
  }
}
y = classnames[y]
# Estimation
fit = GAGA(X, y,alpha=1,family = "multinomial")
Eb = fit$beta#'
#Prediction
#Generate test samples
X_t = R1*rmvnorm(n=test_size, mean=rep(0, nrow(cov_mat)), sigma=cov_mat)
X_t[1:test_size,1]=1
z = X_t\%*\%beta_true
t = exp(z)/(1+rowSums(exp(z)))
t = cbind(t,1-rowSums(t))
tt = t(apply(t,1,cumsum))
tt = cbind(rep(0,test_size),tt)

y_t = rep(0,test_size)
#y_tt = rep(0,test_size)
for(jj in 1:test_size){
  tmp = runif(1,0,1)
  for(kk in 1:(C+1)){
    if((tmp>tt[jj,kk])&&(tmp<=tt[jj,kk+1])){
      y_t[jj] = kk
      break
    }
  }
  #y_tt[jj] = which.max(t[jj,])
}
y_t = classnames[y_t]#
Ey = predict.GAGA(fit,newx = X_t)
cat("\n--------------------")
cat("\n err:", norm(Eb-beta_true,type="2")/norm(beta_true,type="2"))
cat("\n acc:", cal.w.acc(as.character(Eb!=0),as.character(beta_true!=0)))
cat("\n pacc:", cal.w.acc(as.character(Ey),as.character(y_t)))
cat("\n")
}
